version: "3.9"

# Configuration Docker Compose pour Dokploy
# IMPORTANT: Les labels Traefik doivent être UNIQUEMENT dans deploy.labels pour Swarm mode
# Ne JAMAIS ajouter de labels au niveau top-level du service

services:
  evolution-api:
    image: evoapicloud/evolution-api:v2.3.0
    env_file:
      - .env
    environment:
      SERVER_TYPE: http
      SERVER_PORT: 8080
      SERVER_URL: https://${DOMAIN_NAME}

      DATABASE_ENABLED: "true"
      DATABASE_PROVIDER: postgresql
      DATABASE_CONNECTION_URI: ${DATABASE_CONNECTION_URI}
      DATABASE_CONNECTION_CLIENT_NAME: evolution_single_16gb
      DATABASE_SAVE_DATA_INSTANCE: "true"
      DATABASE_SAVE_DATA_NEW_MESSAGE: "false"
      DATABASE_SAVE_MESSAGE_UPDATE: "true"
      DATABASE_SAVE_DATA_CONTACTS: "true"
      DATABASE_SAVE_DATA_CHATS: "false"
      DATABASE_SAVE_DATA_LABELS: "true"
      DATABASE_SAVE_DATA_HISTORIC: "true"

      CACHE_REDIS_ENABLED: "true"
      CACHE_REDIS_URI: ${CACHE_REDIS_URI}
      CACHE_REDIS_PREFIX_KEY: evolution_single
      CACHE_REDIS_SAVE_INSTANCES: "true"
      CACHE_LOCAL_ENABLED: "false"

      AUTHENTICATION_API_KEY: ${AUTHENTICATION_API_KEY}
      AUTHENTICATION_JWT_EXPIRES_IN: 0
      AUTHENTICATION_JWT_SECRET: ${JWT_SECRET}

      DEL_INSTANCE: 8
      CLEAN_STORE_CLEANING_INTERVAL: 7200
      CLEAN_STORE_MESSAGES: "true"
      CLEAN_STORE_MESSAGE_UP_TO: "false"
      CLEAN_STORE_CONTACTS: "true"
      CLEAN_STORE_CHATS: "false"

      WEBHOOK_GLOBAL_URL: ${WEBHOOK_GLOBAL_URL:-https://wazzap.ngrok.app/api/webhook/v2/messageHandlers}
      WEBHOOK_GLOBAL_ENABLED: ${WEBHOOK_GLOBAL_ENABLED:-true}
      WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS: ${WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS:-true}
      WEBHOOK_GLOBAL_WEBHOOK_BASE64: ${WEBHOOK_GLOBAL_WEBHOOK_BASE64:-true}

      WEBHOOK_EVENTS_APPLICATION_STARTUP: ${WEBHOOK_EVENTS_APPLICATION_STARTUP:-false}
      WEBHOOK_EVENTS_QRCODE_UPDATED: ${WEBHOOK_EVENTS_QRCODE_UPDATED:-true}
      WEBHOOK_EVENTS_MESSAGES_SET: ${WEBHOOK_EVENTS_MESSAGES_SET:-false}
      WEBHOOK_EVENTS_MESSAGES_UPSERT: ${WEBHOOK_EVENTS_MESSAGES_UPSERT:-true}
      WEBHOOK_EVENTS_MESSAGES_UPDATE: ${WEBHOOK_EVENTS_MESSAGES_UPDATE:-false}
      WEBHOOK_EVENTS_MESSAGES_DELETE: ${WEBHOOK_EVENTS_MESSAGES_DELETE:-false}
      WEBHOOK_EVENTS_SEND_MESSAGE: ${WEBHOOK_EVENTS_SEND_MESSAGE:-true}
      WEBHOOK_EVENTS_CONTACTS_SET: ${WEBHOOK_EVENTS_CONTACTS_SET:-false}
      WEBHOOK_EVENTS_CONTACTS_UPSERT: ${WEBHOOK_EVENTS_CONTACTS_UPSERT:-false}
      WEBHOOK_EVENTS_CONTACTS_UPDATE: ${WEBHOOK_EVENTS_CONTACTS_UPDATE:-false}
      WEBHOOK_EVENTS_PRESENCE_UPDATE: ${WEBHOOK_EVENTS_PRESENCE_UPDATE:-false}
      WEBHOOK_EVENTS_CHATS_SET: ${WEBHOOK_EVENTS_CHATS_SET:-false}
      WEBHOOK_EVENTS_CHATS_UPSERT: ${WEBHOOK_EVENTS_CHATS_UPSERT:-false}
      WEBHOOK_EVENTS_CHATS_UPDATE: ${WEBHOOK_EVENTS_CHATS_UPDATE:-false}
      WEBHOOK_EVENTS_CHATS_DELETE: ${WEBHOOK_EVENTS_CHATS_DELETE:-false}
      WEBHOOK_EVENTS_GROUPS_UPSERT: ${WEBHOOK_EVENTS_GROUPS_UPSERT:-false}
      WEBHOOK_EVENTS_GROUPS_UPDATE: ${WEBHOOK_EVENTS_GROUPS_UPDATE:-false}
      WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE: ${WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE:-false}
      WEBHOOK_EVENTS_CONNECTION_UPDATE: ${WEBHOOK_EVENTS_CONNECTION_UPDATE:-true}
      WEBHOOK_EVENTS_LABELS_EDIT: ${WEBHOOK_EVENTS_LABELS_EDIT:-false}
      WEBHOOK_EVENTS_LABELS_ASSOCIATION: ${WEBHOOK_EVENTS_LABELS_ASSOCIATION:-false}
      WEBHOOK_EVENTS_CALL: ${WEBHOOK_EVENTS_CALL:-false}
      WEBHOOK_EVENTS_NEW_JWT_TOKEN: ${WEBHOOK_EVENTS_NEW_JWT_TOKEN:-false}
      WEBHOOK_EVENTS_TYPEBOT_START: ${WEBHOOK_EVENTS_TYPEBOT_START:-false}
      WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS: ${WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS:-false}
      WEBHOOK_EVENTS_CHAMA_AI_ACTION: ${WEBHOOK_EVENTS_CHAMA_AI_ACTION:-false}
      WEBHOOK_EVENTS_ERRORS: ${WEBHOOK_EVENTS_ERRORS:-false}
      WEBHOOK_EVENTS_ERRORS_WEBHOOK: ${WEBHOOK_EVENTS_ERRORS_WEBHOOK:-false}

      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_COLOR: "false"
      LOG_BAILEYS: error

      CORS_ORIGIN: "*"
      CORS_METHODS: "POST,GET,PUT,DELETE"
      CORS_CREDENTIALS: "true"

      S3_ENABLED: "false"
 
      STORE_MESSAGES: "true"
      STORE_CONTACTS: "true"
      STORE_CHATS: "false"

    volumes:
      - evolution_instances:/evolution/instances

    networks:
      - dokploy-network

    # IMPORTANT: PAS de labels ici! Uniquement dans deploy.labels
    # Les labels top-level sont pour Docker standalone, pas Swarm

    deploy:
      mode: replicated
      replicas: 2
      
      # Répartir les replicas sur les différents nodes
      placement:
        preferences:
          - spread: node.id
        # Optionnel: contraindre à certains nodes
        # constraints:
        #   - node.labels.type == evolution-worker
      
      # Configuration de mise à jour (rolling update)
      update_config:
        parallelism: 1      # Mettre à jour 1 instance à la fois
        delay: 10s          # Attendre 10s entre chaque instance
        failure_action: rollback
        monitor: 30s
        order: start-first  # Démarrer la nouvelle avant de stopper l'ancienne
      
      # Configuration de rollback
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        order: stop-first
      
      # Politique de redémarrage
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      
      
      
      # LABELS TRAEFIK - UNIQUEMENT ICI pour Swarm mode!
      labels:
        # Activation Traefik
        - traefik.enable=true
        
        # Configuration du routeur
        - traefik.http.routers.evolution_v2.rule=Host(`${DOMAIN_NAME}`)
        - traefik.http.routers.evolution_v2.entrypoints=websecure
        - traefik.http.routers.evolution_v2.tls.certresolver=letsencrypt
        - traefik.http.routers.evolution_v2.service=evolution_v2
        
        # Configuration du service (load balancer)
        - traefik.http.services.evolution_v2.loadbalancer.server.port=8080
        - traefik.http.services.evolution_v2.loadbalancer.passHostHeader=true
        
        # Configuration pour éviter les timeouts
        - traefik.http.services.evolution_v2.loadbalancer.responseForwarding.flushInterval=100ms
        
        # Health check
        - traefik.http.services.evolution_v2.loadbalancer.healthcheck.path=/
        - traefik.http.services.evolution_v2.loadbalancer.healthcheck.interval=10s
        - traefik.http.services.evolution_v2.loadbalancer.healthcheck.timeout=5s
        
        # Sticky sessions (optionnel - décommenter si besoin)
        # - traefik.http.services.evolution_v2.loadbalancer.sticky.cookie=true
        # - traefik.http.services.evolution_v2.loadbalancer.sticky.cookie.name=evolution_session
        
        # Réseau Traefik (important pour Dokploy)
        

networks:
  dokploy-network:
    external: true
    name: dokploy-network

volumes:
  evolution_instances:
    external: true
    name: evolution_v2_data

