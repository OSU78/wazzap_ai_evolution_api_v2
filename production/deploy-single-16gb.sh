#!/bin/bash

# ========================================
# Script de D√©ploiement - 1 Serveur Hostinger 16GB
# ========================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo -e "${BLUE}"
echo "üöÄ D√©ploiement Evolution API v2 - 1 Serveur 16GB"
echo "=============================================="
echo "Configuration : 10 instances Evolution API"
echo "Capacit√©      : ~400 comptes WhatsApp"
echo "Serveur       : Hostinger 16GB RAM"
echo "Mode          : Docker Compose (pas de Swarm)"
echo -e "${NC}"

# V√©rifier si on est sur le bon serveur
log_info "V√©rification de l'environnement..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©!"
    echo "Ex√©cutez d'abord: ./setup-vps.sh"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©!"
    echo "Ex√©cutez d'abord: ./setup-vps.sh"
    exit 1
fi

# V√©rifier les ressources (compatible Linux/macOS)
if command -v free &> /dev/null; then
    # Linux
    TOTAL_RAM=$(free -g | awk 'NR==2{printf "%.0f", $2}')
    log_info "RAM disponible: ${TOTAL_RAM}GB"
    
    if [ $TOTAL_RAM -lt 14 ]; then
        log_warning "RAM d√©tect√©e: ${TOTAL_RAM}GB (recommand√©: 16GB+)"
        echo "Continuez-vous quand m√™me? (y/N)"
        read -n 1 -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
else
    # macOS ou autre
    log_info "V√©rification des ressources (d√©tection automatique)"
fi

# Demander les informations de configuration
echo ""
log_info "Configuration du d√©ploiement..."
read -p "üåê Nom de domaine (ex: evolution.wazzap.fr): " DOMAIN_NAME
read -p "üìß Email pour Let's Encrypt: " LETSENCRYPT_EMAIL

if [ -z "$DOMAIN_NAME" ] || [ -z "$LETSENCRYPT_EMAIL" ]; then
    log_error "Domaine et email sont obligatoires!"
    exit 1
fi

# Cr√©er le fichier .env
log_info "Cr√©ation du fichier de configuration..."
cat > .env << EOF
# Configuration 1 Serveur 16GB
DOMAIN_NAME=$DOMAIN_NAME
LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL

# Base de donn√©es Neon
DATABASE_CONNECTION_URI=postgresql://neondb_owner:npg_cyOdLoBN0Z5T@ep-soft-pine-adcz7qon-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require

# Redis Cloud
CACHE_REDIS_URI=redis://default:hUQnreFwfxJYV5VD2R6VmpJTu8angsP2@redis-19966.c10.us-east-1-2.ec2.redns.redis-cloud.com:19966/1

# Authentification
AUTHENTICATION_API_KEY=B6D711FCDE4D4FD5936544120E713C37
JWT_SECRET=L=0YWt]b2w[WF>#>:&CWOMH2c<;Kn95jH

# Webhook Wazzap
WEBHOOK_GLOBAL_URL=https://wazzap.ngrok.app/api/webhook/v2/messageHandlers
WEBHOOK_GLOBAL_ENABLED=true
WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=true
WEBHOOK_GLOBAL_WEBHOOK_BASE64=true
WEBHOOK_GLOBAL_EVENTS=SEND_MESSAGE,QRCODE_UPDATED,REMOVE_INSTANCE,LOGOUT_INSTANCE,CONNECTION_UPDATE,MESSAGES_UPSERT

# Logs
LOG_LEVEL=INFO
EOF

log_success "Configuration cr√©√©e"

# Test des services externes (optionnel en local)
log_info "Test des services externes..."

# Test Neon PostgreSQL (skip en local/d√©veloppement)
log_info "Test Neon PostgreSQL..."
if command -v timeout &> /dev/null; then
    # Linux avec timeout
    if timeout 10 docker run --rm postgres:15-alpine psql "postgresql://neondb_owner:npg_cyOdLoBN0Z5T@ep-soft-pine-adcz7qon-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require" -c "SELECT 1;" >/dev/null 2>&1; then
        log_success "Neon PostgreSQL accessible"
    else
        log_warning "Neon PostgreSQL inaccessible - Continuons quand m√™me"
    fi
else
    # macOS ou environnement sans timeout
    log_info "Test Neon PostgreSQL ignor√© (environnement local d√©tect√©)"
fi

# Test Redis Cloud (skip en local/d√©veloppement)
log_info "Test Redis Cloud..."
if command -v timeout &> /dev/null; then
    # Linux avec timeout
    if timeout 10 docker run --rm redis:7-alpine redis-cli -u "redis://default:hUQnreFwfxJYV5VD2R6VmpJTu8angsP2@redis-19966.c10.us-east-1-2.ec2.redns.redis-cloud.com:19966" ping 2>/dev/null | grep -q PONG; then
        log_success "Redis Cloud accessible"
    else
        log_warning "Redis Cloud inaccessible - Continuons quand m√™me"
    fi
else
    # macOS ou environnement sans timeout
    log_info "Test Redis Cloud ignor√© (environnement local d√©tect√©)"
fi

# Arr√™ter les anciens services
log_info "Arr√™t des anciens services..."
docker-compose down 2>/dev/null || true
docker-compose -f docker-compose-single-16gb.yml down 2>/dev/null || true

# Confirmation
echo ""
log_warning "CONFIGURATION DU D√âPLOIEMENT :"
log_warning "‚Ä¢ 1 serveur Hostinger 16GB RAM"
log_warning "‚Ä¢ 10 instances Evolution API"
log_warning "‚Ä¢ Capacit√© : ~400 comptes WhatsApp"
log_warning "‚Ä¢ Domaine : $DOMAIN_NAME"
echo ""
echo "Continuer le d√©ploiement ? (y/N)"
read -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_info "D√©ploiement annul√©"
    exit 0
fi

# D√©marrer les services
log_info "D√©marrage des services..."
docker-compose -f docker-compose-single-16gb.yml up -d

# Attendre que les services soient pr√™ts
log_info "Attente du d√©marrage des services..."
log_info "‚è≥ Traefik + SSL + 10 instances API (3-5 minutes)..."

# Fonction d'attente pour Traefik
wait_for_traefik() {
    local max_attempts=15
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo -n "   Traefik $attempt/$max_attempts... "
        
        if curl -s -f http://localhost:8080/api/http/services > /dev/null 2>&1; then
            echo "‚úÖ Traefik pr√™t!"
            return 0
        else
            echo "‚è≥ En attente..."
            sleep 10
            attempt=$((attempt + 1))
        fi
    done
    
    echo "‚ùå Timeout Traefik"
    return 1
fi

# Fonction d'attente pour l'API
wait_for_api() {
    local max_attempts=20
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo -n "   API $attempt/$max_attempts... "
        
        if curl -s -f https://$DOMAIN_NAME/ > /dev/null 2>&1; then
            echo "‚úÖ API pr√™te!"
            return 0
        else
            echo "‚è≥ En attente..."
            sleep 15
            attempt=$((attempt + 1))
        fi
    done
    
    echo "‚ùå Timeout API"
    return 1
fi

# Attendre Traefik
if wait_for_traefik; then
    log_success "Traefik op√©rationnel"
else
    log_warning "Traefik timeout - Continuons quand m√™me"
fi

# Attendre l'API
if wait_for_api; then
    log_success "API Evolution accessible"
else
    log_warning "API timeout - V√©rifiez manuellement"
fi

# V√©rification finale
echo ""
log_info "=== R√âSUM√â DU D√âPLOIEMENT ==="

# Status des conteneurs
echo "üìä Status des conteneurs :"
docker-compose -f docker-compose-single-16gb.yml ps

# Test de l'API
echo ""
echo "üß™ Test de l'API :"
if curl -s https://$DOMAIN_NAME/ | grep -q "Welcome to the Evolution API"; then
    log_success "API r√©pond correctement"
else
    log_warning "API ne r√©pond pas encore - Patientez quelques minutes"
fi

# Informations d'acc√®s
echo ""
echo "üåê Acc√®s √† votre infrastructure :"
echo "  ‚Ä¢ API Evolution     : https://$DOMAIN_NAME"
echo "  ‚Ä¢ Traefik Dashboard : https://traefik.$DOMAIN_NAME"
echo "  ‚Ä¢ Dashboard Local   : http://IP_SERVEUR:8080"
echo "  ‚Ä¢ Cl√© API          : B6D711FCDE4D4FD5936544120E713C37"

# Utilisation des ressources
RUNNING_CONTAINERS=$(docker-compose -f docker-compose-single-16gb.yml ps --services --filter "status=running" | wc -l)
echo ""
echo "üíæ Utilisation estim√©e :"
echo "  ‚Ä¢ Conteneurs actifs : $RUNNING_CONTAINERS"
echo "  ‚Ä¢ RAM utilis√©e : ~10-12GB / 16GB"
echo "  ‚Ä¢ Capacit√© : ~400 comptes WhatsApp"

echo ""
echo "üìã Commandes de gestion :"
echo "  docker-compose -f docker-compose-single-16gb.yml logs -f evolution-api  # Logs"
echo "  docker-compose -f docker-compose-single-16gb.yml ps                     # Status"
echo "  docker-compose -f docker-compose-single-16gb.yml scale evolution-api=N  # Scaling"
echo "  docker-compose -f docker-compose-single-16gb.yml down                   # Arr√™ter"

echo ""
log_success "üéâ D√âPLOIEMENT TERMIN√â !"
log_success "Votre serveur unique est op√©rationnel avec 10 instances API"

echo ""
log_info "üìà Prochaines √©tapes :"
echo "1. Tester la cr√©ation d'instances WhatsApp"
echo "2. Surveiller l'utilisation des ressources"
echo "3. Planifier l'ajout d'un 2√®me serveur si besoin"
echo "4. Commencer la migration de vos comptes"

echo ""
log_info "üîß Scaling rapide (dans la limite du serveur) :"
echo "  docker-compose -f docker-compose-single-16gb.yml scale evolution-api=12  # +2 instances"
echo "  docker-compose -f docker-compose-single-16gb.yml scale evolution-api=8   # -2 instances"

echo ""
log_success "üéä F√©licitations ! Votre API Evolution est pr√™te !"
